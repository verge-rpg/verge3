
#define MAX_ENEMIES 30
#define ENEMY_AI_STUPID		1
#define ENEMY_AI_BOY		2
#define ENEMY_AI_GIRL		3
#define ENEMY_AI_BOY_SMART	4
#define ENEMY_AI_GIRL_SMART	5
#define ENEMY_AI_SANTA		6

#define ENEMY_AI_STUPID_MAXIMUM_MOVE_SPEED 50

struct enemy_type
{
	string chrfile;
	int direction, lastdirection;
	string lastframe, frame;
	int x100, y100;
	int hspeed, vspeed;
	int idle_flag, move_flag;
	int jump_flag, fall_flag;
	int hurt_flag, pain_flag;
	int land_flag, swim_flag;
	int attack_flag, run_flag;
	int walk_sound, walk_sound_flag;
	int snowball;
	int ent;
	int ai;
	int damage;
};

int enemy_count;
enemy_type enemy[MAX_ENEMIES];

void AddEnemy(int x, int y, string chrfile, int ai)
{
	if (enemy_count < MAX_ENEMIES)
	{
		enemy[enemy_count].ent = EntitySpawn(0, 0, chrfile);
		
		entity.visible[enemy[enemy_count].ent] = 1;
		entity.x[enemy[enemy_count].ent] = x;
		entity.y[enemy[enemy_count].ent] = y;
		enemy[enemy_count].chrfile = chrfile;
		enemy[enemy_count].ai = ai;
		enemy[enemy_count].x100 = x * 100;
		enemy[enemy_count].y100 = y * 100;
		enemy[enemy_count].direction = Random(0, 1);
		enemy[enemy_count].lastdirection = 0;
		enemy[enemy_count].lastframe = "";
		enemy[enemy_count].frame = "";
		enemy[enemy_count].hspeed = 0;
		enemy[enemy_count].vspeed = 0;
		enemy[enemy_count].idle_flag = 0;
		enemy[enemy_count].move_flag = 0;
		enemy[enemy_count].jump_flag = 0;
		enemy[enemy_count].fall_flag = 0;
		enemy[enemy_count].hurt_flag = 0;
		enemy[enemy_count].pain_flag = 0;
		enemy[enemy_count].land_flag = 0;
		enemy[enemy_count].swim_flag = 0;
		enemy[enemy_count].attack_flag = 0;
		enemy[enemy_count].run_flag = 0;
		enemy[enemy_count].walk_sound = 0;
		enemy[enemy_count].walk_sound_flag = 0;
		enemy[enemy_count].damage = 0;
		enemy_count++;
	}
}

void RemoveEnemy(int enemy_index)
{
		entity.visible[enemy[enemy_index].ent] = 0;
		if (enemy_count > 0)
		{
			enemy_count--;
			enemy[enemy_index].chrfile = enemy[enemy_count].chrfile;
			enemy[enemy_index].ent = enemy[enemy_count].ent;
			enemy[enemy_index].ai = enemy[enemy_count].ai;
			enemy[enemy_index].x100 = enemy[enemy_count].x100;
			enemy[enemy_index].y100 = enemy[enemy_count].y100;
			enemy[enemy_index].direction = enemy[enemy_count].direction;
			enemy[enemy_index].lastdirection = enemy[enemy_count].direction;
			enemy[enemy_index].lastframe = enemy[enemy_count].lastframe;
			enemy[enemy_index].frame = enemy[enemy_count].frame;
			enemy[enemy_index].hspeed = enemy[enemy_count].hspeed;
			enemy[enemy_index].vspeed = enemy[enemy_count].vspeed;
			enemy[enemy_index].idle_flag = enemy[enemy_count].idle_flag;
			enemy[enemy_index].move_flag = enemy[enemy_count].move_flag;
			enemy[enemy_index].jump_flag = enemy[enemy_count].jump_flag;
			enemy[enemy_index].fall_flag = enemy[enemy_count].fall_flag;
			enemy[enemy_index].hurt_flag = enemy[enemy_count].hurt_flag;
			enemy[enemy_index].pain_flag = enemy[enemy_count].pain_flag;
			enemy[enemy_index].land_flag = enemy[enemy_count].land_flag;
			enemy[enemy_index].swim_flag = enemy[enemy_count].swim_flag;
			enemy[enemy_index].attack_flag = enemy[enemy_count].attack_flag;
			enemy[enemy_index].run_flag = enemy[enemy_count].run_flag;
			enemy[enemy_index].walk_sound = enemy[enemy_count].walk_sound;
			enemy[enemy_index].walk_sound_flag = enemy[enemy_count].walk_sound_flag;
			enemy[enemy_index].damage = enemy[enemy_count].damage;
		}
}

void FileWriteEnemies(int f)
{
	int i;
	FileWriteByte(f, enemy_count);
	for (i = 0; i < enemy_count; i++)
	{
		FileWriteString(f, enemy[i].chrfile);
		//Log (entity.chr[enemy[i].ent]);
		FileWriteByte(f, enemy[i].ai);
		FileWriteQuad(f, enemy[i].x100);
		FileWriteQuad(f, enemy[i].y100);
		FileWriteByte(f, enemy[i].direction);
		FileWriteByte(f, enemy[i].lastdirection);
		FileWriteString(f, enemy[i].lastframe);
		FileWriteString(f, enemy[i].frame);
		FileWriteQuad(f, enemy[i].hspeed);
		FileWriteQuad(f, enemy[i].vspeed);
		FileWriteByte(f, enemy[i].idle_flag);
		FileWriteByte(f, enemy[i].move_flag);
		FileWriteByte(f, enemy[i].jump_flag);
		FileWriteByte(f, enemy[i].hurt_flag);
		FileWriteByte(f, enemy[i].pain_flag);
		FileWriteByte(f, enemy[i].land_flag);
		FileWriteByte(f, enemy[i].swim_flag);
		FileWriteByte(f, enemy[i].attack_flag);
		FileWriteByte(f, enemy[i].run_flag);
		FileWriteQuad(f, enemy[i].damage);
	}
}

void FileReadEnemies(int f)
{
	int i;
	string chrfile;
	enemy_count = FileReadByte(f);
	for (i = 0; i < enemy_count; i++)
	{
		enemy[i].chrfile = FileReadString(f);
		enemy[i].ai = FileReadByte(f);
		enemy[i].x100 = FileReadQuad(f);
		enemy[i].y100 = FileReadQuad(f);
		enemy[i].direction = FileReadByte(f);
		enemy[i].lastdirection = FileReadByte(f);
		enemy[i].lastframe = FileReadString(f);
		enemy[i].frame = FileReadString(f);
		enemy[i].hspeed = FileReadQuad(f);
		enemy[i].vspeed = FileReadQuad(f);
		enemy[i].idle_flag = FileReadByte(f);
		enemy[i].move_flag = FileReadByte(f);
		enemy[i].jump_flag = FileReadByte(f);
		enemy[i].hurt_flag = FileReadByte(f);
		enemy[i].pain_flag = FileReadByte(f);
		enemy[i].land_flag = FileReadByte(f);
		enemy[i].swim_flag = FileReadByte(f);
		enemy[i].attack_flag = FileReadByte(f);
		enemy[i].run_flag = FileReadByte(f);
		enemy[i].damage = FileReadQuad(f);
	}
}

void ClearEnemies()
{
	int i;
	for (i = 0; i < enemy_count; i++)
	{
		enemy[i].ai = 0;
		enemy[i].ent = 0;
		enemy[i].x100 = 0;
		enemy[i].y100 = 0;
		enemy[i].direction = 0;
		enemy[i].lastdirection = 0;
		enemy[i].lastframe = "";
		enemy[i].frame = "";
		enemy[i].hspeed = 0;
		enemy[i].vspeed = 0;
		enemy[i].idle_flag = 0;
		enemy[i].move_flag = 0;
		enemy[i].jump_flag = 0;
		enemy[i].hurt_flag = 0;
		enemy[i].pain_flag = 0;
		enemy[i].land_flag = 0;
		enemy[i].swim_flag = 0;
		enemy[i].attack_flag = 0;
		enemy[i].run_flag = 0;
		enemy[i].damage = 0;
	}
	enemy_count = 0;
}

void PrepareEnemies()
{
	int i;
	for (i = 0; i < enemy_count; i++)
	{
		enemy[i].ent = EntitySpawn(0, 0, enemy[i].chrfile);
		entity.x[enemy[i].ent] = enemy[i].x100 / 100;
		entity.y[enemy[i].ent] = enemy[i].y100 / 100;
	}
}

void EnemyAIStupid()
{
	if (enemy[i].damage >= 500 && !enemy[i].hurt_flag)
	{
			entity.visible[enemy[i].ent] = 0;
	}
}

void ProcessEnemies()
{
	int i;
	for (i = 0; i < enemy_count; i++)
	{
		if(entity.visible[enemy[i].ent])
		{
			switch(enemy[i].ai)
			{
				case ENEMY_AI_STUPID:
					if (enemy[i].damage >= 500 && !enemy[i].hurt_flag)
					{
						//RemoveEnemy(i);
						entity.visible[enemy[i].ent] = 0;
					}
					if (!enemy[i].hurt_flag)
					{
						if (enemy[i].direction == PLAYER_DIRECTION_LEFT)
						{
							enemy[i].hspeed -= MOVE_ACCELERATION;
							enemy[i].frame = "WALK";
						}
						else
						{
							enemy[i].hspeed += MOVE_ACCELERATION;
							enemy[i].frame = "WALK";
						}
						enemy[i].hspeed = max (min(enemy[i].hspeed, ENEMY_AI_STUPID_MAXIMUM_MOVE_SPEED), -ENEMY_AI_STUPID_MAXIMUM_MOVE_SPEED);
					}
					else
					{
						enemy[i].frame = "HURT";
						enemy[i].hurt_flag--;
					}
					if (enemy[i].fall_flag)
					{
						enemy[i].vspeed += GRAVITY_ACCELERATION;
						enemy[i].frame = "FALL";
					}
					if (!EnemyLocateGround(i))
					{
						enemy[i].vspeed += GRAVITY_ACCELERATION;
						enemy[i].land_flag = 0;
						enemy[i].fall_flag++;
					}
					else
					{
						enemy[i].vspeed = 0;
						enemy[i].fall_flag = 0;
					}
					if (enemy[i].hspeed < 0)
					{
						// Move if the enemy[i] isn't walled, can climb a slope, or isn't at the map's edge.
						if (!GetObsPixel (enemy[i].x100 + enemy[i].hspeed / 100 - 1, enemy[i].y100 / 100)
							&& !GetObsPixel (enemy[i].x100 + enemy[i].hspeed / 100 - 1, enemy[i].y100 / 100 + (entity.hoth[enemy[i].ent] / 2))
							&& !GetObsPixel (enemy[i].x100 + enemy[i].hspeed / 100 - 1, enemy[i].y100 - (MAXIMUM_SLOPE * abs(enemy[i].hspeed)) / 100 - MAXIMUM_SLOPE + entity.hoth[enemy[i].ent])
							&& enemy[i].x100 + enemy[i].hspeed > 0)
							{
								enemy[i].x100 += enemy[i].hspeed;
								if (!enemy[i].fall_flag && !enemy[i].jump_flag)
								{
									if (!EnemyLocateGround(i))
									{
										enemy[i].y100 += max(abs(enemy[i].hspeed) * MAXIMUM_SLOPE, MAXIMUM_SLOPE * 100);
									}
								}
							}
						else
						{
							enemy[i].hspeed = 0;
							enemy[i].lastdirection = enemy[i].direction;
							enemy[i].direction = enemy[i].direction ^ 1;
						}

					}
					else if (enemy[i].hspeed > 0)
					{
						// Move if the enemy[i] isn't walled, can climb a slope, or isn't at the map's edge.
						if (!GetObsPixel (enemy[i].x100 + enemy[i].hspeed / 100 + entity.hotw[enemy[i].ent] + 1, enemy[i].y100 / 100)
								&& !GetObsPixel (enemy[i].x100 + enemy[i].hspeed / 100 + entity.hotw[enemy[i].ent] + 1, enemy[i].y100 / 100 + (entity.hoth[enemy[i].ent] / 2))
								&& !GetObsPixel (enemy[i].x100 + enemy[i].hspeed / 100 + entity.hotw[enemy[i].ent] + 1, enemy[i].y100 - (MAXIMUM_SLOPE * abs(enemy[i].hspeed)) / 100 - MAXIMUM_SLOPE + entity.hoth[enemy[i].ent])
								&& enemy[i].x100 + enemy[i].hspeed < curmap.w * 1600)
								{
									enemy[i].x100 += enemy[i].hspeed;
									if (!enemy[i].fall_flag && !enemy[i].jump_flag)
									{
										if (!EnemyLocateGround(i))
										{
											enemy[i].y100 += max(abs(enemy[i].hspeed) * MAXIMUM_SLOPE, MAXIMUM_SLOPE * 100);
										}
									}
								}
						else
						{
							enemy[i].hspeed = 0;
							enemy[i].direction = enemy[i].direction ^ 1;
						}
					}
					enemy[i].y100 += enemy[i].vspeed;
					// Floor clipping prevention.
					while (GetObsPixel (enemy[i].x100 / 100, enemy[i].y100 / 100 + entity.hoth[enemy[i].ent])
							|| GetObsPixel (enemy[i].x100 / 100 + (entity.hotw[enemy[i].ent] / 2), enemy[i].y100 / 100 + entity.hoth[enemy[i].ent])
							|| GetObsPixel (enemy[i].x100 / 100 + entity.hotw[enemy[i].ent], enemy[i].y100 / 100 + entity.hoth[enemy[i].ent])
							)
							{
								enemy[i].y100 -= 100;
							}
					if (entity.hotw[enemy[i].ent] * 100 + player.x100 >= enemy[i].x100
						&& player.x100 <= entity.hotw[enemy[i].ent] * 100 + enemy[i].x100
						&& entity.hoth[enemy[i].ent] * 100 + player.y100 >= enemy[i].y100
						&& player.y100 <= entity.hoth[enemy[i].ent] * 100 + enemy[i].y100
						&& !enemy[i].hurt_flag
						)
					{
						PlayerHurt(1);
					}
			}
		}
		else if (enemy[i].x100 < -ImageWidth(screen) / 2 + xwin * 100
			&& enemy[i].x100 < ImageWidth(screen) / 2 + xwin + ImageWidth(screen) * 100
			&& enemy[i].x100 < -ImageHeight(screen) / 2 + ywin * 100
			&& enemy[i].x100 < -ImageHeight(screen) / 2 + ywin + ImageHeight(screen) * 100
			)
		{
			enemy[i].damage = 0;
			entity.visible[enemy[i].ent] = 1;
		}
		entity.x[enemy[i].ent] = enemy[i].x100 / 100;
		entity.y[enemy[i].ent] = enemy[i].y100 / 100;
		SetAnimation(enemy[i].ent, enemy[i].direction, enemy[i].frame);
		
	}
}