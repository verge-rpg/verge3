// ================================================================================================
// Geas : camscroll.lib.vc
// ------------------------------------------------------------------------------------------------
//	Four functions to cause the camera to smoothly scroll to a new place. Underneath, only it's
//	all really only one function: camScrollTo(). The others are simply wrappers to facilitate
//	certain other uses of it.
//
//		camScrollTo(x, y, time2);
//			Scrolls the camera to [x],[y] in [time2] ticks.
//			This function places x,y at the topleft corner.
//			your 'starting position' is xwin, ywin.
//
//		camScrollToS(x, y, speed);
//			Scrolls the camera to [x],[y] at [speed] pixels/second.
//			This function places x,y at the topleft corner.
//			your 'starting position' is xwin, ywin.
//
//		camCtrScrollTo(x, y, time2);
//			Scrolls the camera centered upon [x],[y] in [time2] ticks.
//			your 'starting position' is xwin, ywin.
//
//		camCtrScrollToS(x, y, speed);
//			Scrolls the camera centered upon [x],[y] at [speed] pixels/second.
//			your 'starting position' is xwin, ywin.
//
//		camReturnToPlayer(entity, time2);
//			Returns the camera to [entity]'s position in [time2] ticks.
//
//		camReturnToPlayerS(entity, speed);
//			Returns the camera to [entity]'s position at [speed] pixels/second.
//
//		camZoomToEntity(int ent, int time2)
//		camZoomToEntityS(int ent, int speed)
//			Like camReturnToPlayer/S, but for any entity.  Does not set CameraTracking to 1.
//
// Coding by Shamus "Kildorf" Peveril
// Light mods done by Ben "McGrue" McGraw
// ================================================================================================

int camIsScrolling = 0;			// a flag that shows whether the camera is currently scrolling or not
								// technically read/writable, but writing will only make it wrong, not
								// change anything ^_^

// ------------------------------------------------------------------------------------------------

void camScrollTo(int targetx, int targety, int time2) {
	cameratracking = 0;			// set camera tracking off	
	camIsScrolling = 1;			// and set our query flag (see above)

	int camx, camy;				// camx, camy are the current position of the screen * 10000
								// if we work directly with xwin, ywin, the camera jitters as it
								// travels; adding to a huge number allows smaller additions and
								// smooths the scrolling of the camera
	int dx, dy;					// the change at each iteration of the loop
	int tpass, ot;				// time2 passed since last iteration, and last value of timer
	int txwin, tywin;			// target xwin and ywin
	int done = 0;				// a finishing flag
	
	txwin = targetx;			// calculate txwin, tywin
	tywin = targety;
	
	camx = xwin*10000;									// get camx and camy
	camy = ywin*10000;
	
			// check for border cases; if the target x and y are near the edge of the screen, we want to
			// scroll directly to where the /screen/ will be; without these checks we get the camera
			// hitting the edge of the screen and sliding along it until it reaches the right place
	if(txwin < 0) txwin = 0;
	if(txwin > (((curmap.w)*16) - imageWidth(screen))) txwin = (((curmap.w)*16) - (imageWidth(screen)) - 1);
	if(tywin < 0) tywin = 0;
	if(tywin > ((curmap.h*16) - imageHeight(screen))) tywin = (((curmap.h)*16) - (imageHeight(screen)) - 1);

	dx = ((txwin*10000) - (xwin*10000)) / time2;			// calculate the pixel "step" for each timer tick
	dy = ((tywin*10000) - (ywin*10000)) / time2;			// we use the *10000 value, to smooth the travelling

	ot = timer;					// set ot to timer to get ready for loop
	while(!done && time2 > 0) {	// we have a double check; done will get set when the camera reaches the right place,
								// and time2 counts down to 0
		tpass = timer - ot;						// get tpass for this iteration
		ot = timer;								// set ot for the next iteration
		if((time2 - tpass) <= 0) tpass = time2;	// if tpass is more than what time2 we have left then just use what time2's left
		time2 -= tpass;							// subtract tpass from time2
				
	
			// camx work:
			//  if the next step will take us past our target location, then just jump onto that location
		if(dx > 0 && (camx + (dx*tpass)) > (txwin*100000)) {
			camx = txwin*10000;
		} else if(dx < 0 && (camx + (dx*tpass)) < (txwin*10000)) {
			camx = txwin*10000;
		} else {
			//  otherwise, just make the step
			camx += (dx*tpass);
		}
		
			// repeat for camy		
		if(dy > 0 && (camy + (dy*tpass)) > (tywin*10000)) {
			camy = tywin*10000;
		} else if(dy < 0 && (camy + (dy*tpass)) < (tywin*10000)) {
			camy = tywin*10000;
		} else {
			camy += (dy*tpass);
		}
		
			// set the game's camera coordinates
		xwin = camx/10000;
		ywin = camy/10000;
		
			// and check if we've gotten there yet
		if(xwin == txwin && ywin == tywin) done = 1;
		
			// lastly, repaint the screen after the camera has been moved
		render();
		showpage();
	}
	
		// set our query flag back to 0
	camIsScrolling = 0;
	
		// and, to be certain, set our camera coordinates to where we were aiming
	xwin = txwin;
	ywin = tywin;
}


void camCtrScrollTo(int targetx, int targety, int time2) {
	cameratracking = 0;			// set camera tracking off	
	camIsScrolling = 1;			// and set our query flag (see above)

	int camx, camy;				// camx, camy are the current position of the screen * 10000
								// if we work directly with xwin, ywin, the camera jitters as it
								// travels; adding to a huge number allows smaller additions and
								// smooths the scrolling of the camera
	int dx, dy;					// the change at each iteration of the loop
	int tpass, ot;				// time2 passed since last iteration, and last value of timer
	int txwin, tywin;			// target xwin and ywin
	int done = 0;				// a finishing flag
	
	txwin = (targetx - (imageWidth(screen)/2));			// calculate txwin, tywin
	tywin = (targety - (imageHeight(screen)/2));
	
	camx = xwin*10000;									// get camx and camy
	camy = ywin*10000;
	
			// check for border cases; if the target x and y are near the edge of the screen, we want to
			// scroll directly to where the /screen/ will be; without these checks we get the camera
			// hitting the edge of the screen and sliding along it until it reaches the right place
	if(txwin < 0) txwin = 0;
	if(txwin > (((curmap.w)*16) - imageWidth(screen))) txwin = (((curmap.w)*16) - (imageWidth(screen)) - 1);
	if(tywin < 0) tywin = 0;
	if(tywin > ((curmap.h*16) - imageHeight(screen))) tywin = (((curmap.h)*16) - (imageHeight(screen)) - 1);

	dx = ((txwin*10000) - (xwin*10000)) / time2;			// calculate the pixel "step" for each timer tick
	dy = ((tywin*10000) - (ywin*10000)) / time2;			// we use the *10000 value, to smooth the travelling

	ot = timer;					// set ot to timer to get ready for loop
	while(!done && time2 > 0) {	// we have a double check; done will get set when the camera reaches the right place,
								// and time2 counts down to 0
		tpass = timer - ot;						// get tpass for this iteration
		ot = timer;								// set ot for the next iteration
		if((time2 - tpass) <= 0) tpass = time2;	// if tpass is more than what time2 we have left then just use what time2's left
		time2 -= tpass;							// subtract tpass from time2
				
	
			// camx work:
			//  if the next step will take us past our target location, then just jump onto that location
		if(dx > 0 && (camx + (dx*tpass)) > (txwin*100000)) {
			camx = txwin*10000;
		} else if(dx < 0 && (camx + (dx*tpass)) < (txwin*10000)) {
			camx = txwin*10000;
		} else {
			//  otherwise, just make the step
			camx += (dx*tpass);
		}
		
			// repeat for camy		
		if(dy > 0 && (camy + (dy*tpass)) > (tywin*10000)) {
			camy = tywin*10000;
		} else if(dy < 0 && (camy + (dy*tpass)) < (tywin*10000)) {
			camy = tywin*10000;
		} else {
			camy += (dy*tpass);
		}
		
			// set the game's camera coordinates
		xwin = camx/10000;
		ywin = camy/10000;
		
			// and check if we've gotten there yet
		if(xwin == txwin && ywin == tywin) done = 1;
		
			// lastly, repaint the screen after the camera has been moved
		render();
		showpage();
	}
	
		// set our query flag back to 0
	camIsScrolling = 0;
	
		// and, to be certain, set our camera coordinates to where we were aiming
	xwin = txwin;
	ywin = tywin;
}

// ------------------------------------------------------------------------------------------------

void camReturnToPlayer(int playerentity, int time2) {
		// simple: scroll to the middle of the entity's hotspot, in time2 ticks
	camCtrScrollTo(
		entity.x[playerentity]+(entity.hotw[playerentity]/2),
		entity.y[playerentity]+(entity.hoth[playerentity]/2),
		time2
	);
	
		// and turn camera tracking on
	cameratracking = 1;
	
		// THIS WOULD BE EVEN COOLER IF THERE WAS A GETPLAYER()
}

// ------------------------------------------------------------------------------------------------

void camCtrScrollToS(int targetx, int targety, int speed) {
		// wrapper for camScrollTo()...
	int txwin, tywin;
	txwin = (targetx - (imageWidth(screen)/2));
	tywin = (targety - (imageHeight(screen)/2));

		// adjust txwin/tywin to account for being next to the edge of the map
		// without these adjustments, the time2 calculated will be somewhat less accurate
	if(txwin < 0) txwin = 0;
	if(txwin > ((curmap.w*16) - imageWidth(screen))) txwin = ((curmap.w*16) - (imageWidth(screen)));
	if(tywin < 0) tywin = 0;
	if(tywin > ((curmap.h*16) - imageHeight(screen))) tywin = ((curmap.h*16) - (imageHeight(screen)));

		// calculate the distance to your desired cam location...
	int dx = xwin - txwin, dy = ywin - tywin;
	
	int d = sqrt((dx*dx) + (dy*dy));
	
		// and then just scroll in that distance / your speed --> this gives us the time2 it takes!
		// MATH IS FUN!
	camCtrScrollTo(targetx, targety, (d*100)/(speed));	
}

void camScrollToS(int targetx, int targety, int speed) {
		// wrapper for camScrollTo()...
	int txwin, tywin;
	txwin = targetx;
	tywin = targety;

		// adjust txwin/tywin to account for being next to the edge of the map
		// without these adjustments, the time2 calculated will be somewhat less accurate
	if(txwin < 0) txwin = 0;
	if(txwin > ((curmap.w*16) - imageWidth(screen))) txwin = ((curmap.w*16) - (imageWidth(screen)));
	if(tywin < 0) tywin = 0;
	if(tywin > ((curmap.h*16) - imageHeight(screen))) tywin = ((curmap.h*16) - (imageHeight(screen)));

		// calculate the distance to your desired cam location...
	int dx = xwin - txwin, dy = ywin - tywin;
	
	int d = sqrt((dx*dx) + (dy*dy));
	
		// and then just scroll in that distance / your speed --> this gives us the time2 it takes!
		// MATH IS FUN!
	camScrollTo(targetx, targety, (d*100)/(speed));	
}

// ------------------------------------------------------------------------------------------------

void camReturnToPlayerS(int playerentity, int speed) {
		// basically the same as camScrollToS, except that we use the entity's middle-of-hotspot,
		// rather than passed in parameters
	int txwin, tywin;
	txwin = (entity.x[playerentity]+(entity.hotw[playerentity]/2) - (imageWidth(screen)/2));
	tywin = (entity.y[playerentity]+(entity.hoth[playerentity]/2) - (imageHeight(screen)/2));
	
	if(txwin < 0) txwin = 0;
	if(txwin > ((curmap.w*16) - imageWidth(screen))) txwin = ((curmap.w*16) - (imageWidth(screen)));
	if(tywin < 0) tywin = 0;
	if(tywin > ((curmap.h*16) - imageHeight(screen))) tywin = ((curmap.h*16) - (imageHeight(screen)));

	int dx = xwin - txwin, dy = ywin - tywin;
	
	int d = sqrt((dx*dx) + (dy*dy));
	camCtrScrollTo(
		entity.x[playerentity]+(entity.hotw[playerentity]/2),
		entity.y[playerentity]+(entity.hoth[playerentity]/2),
		(d*100)/(speed)
	);
	
	cameratracking = 1;
}


// ------------

void camZoomToEntity(int ent, int time2) {
		// simple: scroll to the middle of the entity's hotspot, in time2 ticks
	camCtrScrollTo(
		entity.x[ent]+(entity.hotw[ent]/2),
		entity.y[ent]+(entity.hoth[ent]/2),
		time2
	);
}

void camZoomToEntityS(int ent, int speed) {
		// basically the same as camScrollToS, except that we use the entity's middle-of-hotspot,
		// rather than passed in parameters
	int txwin, tywin;
	txwin = (entity.x[ent]+(entity.hotw[ent]/2) - (imageWidth(screen)/2));
	tywin = (entity.y[ent]+(entity.hoth[ent]/2) - (imageHeight(screen)/2));
	
	if(txwin < 0) txwin = 0;
	if(txwin > ((curmap.w*16) - imageWidth(screen))) txwin = ((curmap.w*16) - (imageWidth(screen)));
	if(tywin < 0) tywin = 0;
	if(tywin > ((curmap.h*16) - imageHeight(screen))) tywin = ((curmap.h*16) - (imageHeight(screen)));

	int dx = xwin - txwin, dy = ywin - tywin;
	
	int d = sqrt((dx*dx) + (dy*dy));
	camCtrScrollTo(
		entity.x[ent]+(entity.hotw[ent]/2),
		entity.y[ent]+(entity.hoth[ent]/2),
		(d*100)/(speed)
	);
}

