/***************************************************************************
*                                                                          *
*                    V1RPG VergeC Library for Verge3                       *
*                        Copyright (C)2004 vecna                           *
*                                                                          *
***************************************************************************/

// Valid weather modes.
//
#define WEATHER_NONE		0
#define WEATHER_CLOUDS		1
#define WEATHER_RAIN		2
#define WEATHER_SNOW		3
#define WEATHER_FOG			4
#define WEATHER_NIGHT		5

/********************************** data **********************************/

int weather_mode;
int lxwin, lywin;

/********************************** code **********************************/

// Sets a weather mode to be displayed via the V1RPG_Renderfunc()
// function from v1_rpg.vc
//
// valid weather modes are:
//
// WEATHER_NONE, WEATHER_CLOUDS, , 
// WEATHER_FOG, WEATHER_NIGHT
//
// WEATHER_RAIN and WEATHER_SNOW are not yet implemented.
void SetWeather(int mode)
{
	weather_mode = mode;
	switch (mode)
	{
		case WEATHER_CLOUDS: InitializeClouds();
		case WEATHER_RAIN: InitializeRain();
		case WEATHER_SNOW: InitializeSnow();
	}
	
	lxwin = xwin;
	lywin = ywin;
}

// Renders the weather.  Called by V1RPG_Renderfunc();
//
void RenderWeather()
{
	switch (weather_mode)
	{
		case WEATHER_CLOUDS: RenderClouds();
		case WEATHER_FOG: RenderFog();
		case WEATHER_NIGHT: ColorFilter(CF_BLUE, screen);
	}
}



// shakes the screen horizontally with a magnitude of x_intensity and 
// vertically with a magnitude of y_intensity for duration time 
void Earthquake( int x_intensity, int y_intensity, int duration ) 
{
	int original_x, original_y, original_camera;
	
	original_camera = cameratracking;
	cameratracking = 0; //turn off cameratracking
	original_x = xwin;
	original_y = ywin;
	
	timer = 0;
	while ( timer < duration )
	{
		xwin = original_x;
		ywin = original_y;	
		
		xwin =  xwin+Random(0-x_intensity,x_intensity);
		ywin =  ywin+Random(0-y_intensity,y_intensity);
		
		Render();
		ShowPage();
	}
	
	xwin = original_x; //restore original camera position
	ywin = original_y;
	
	cameratracking = original_camera;	//restore cameratracking to the player-entity
}

/********************************* clouds *********************************/

#define NUM_CLOUDS 			15
#define CLOUDSX 			640
#define CLOUDSY 			480

int cloudthink;
int clouds_initd;

struct CloudType
{
	int x, y, c;
	int speed, cnt;
}

CloudType _clouds[NUM_CLOUDS];

int _cloud1, _cloud2, _cloud3;
int _cloud1s, _cloud2s, _cloud3s;

// Takes care of setting up the clouds system.
//
void InitializeClouds()
{
	if (!clouds_initd)
	{
		_cloud1 = LoadImage("res\system\cloud1.gif");
		_cloud2 = LoadImage("res\system\cloud2.gif");
		_cloud3 = LoadImage("res\system\cloud3.gif");
		
		_cloud1s= DuplicateImage(_cloud1); Silhouette(0, 0, RGB(40, 40, 40), _cloud1, _cloud1s);
		_cloud2s= DuplicateImage(_cloud2); Silhouette(0, 0, RGB(40, 40, 40), _cloud2, _cloud2s);
		_cloud3s= DuplicateImage(_cloud3); Silhouette(0, 0, RGB(40, 40, 40), _cloud3, _cloud3s);
		clouds_initd = 1;
	}
	
	int i;
	for (i=0; i<NUM_CLOUDS; i++)
	{
		_clouds[i].x = Random(0, CLOUDSX) * 65536;
		_clouds[i].y = Random(0, CLOUDSY) * 65536;		
		_clouds[i].c = Random(0,2);
		_clouds[i].speed = Random(10, 30) * 65536 / 100;
		_clouds[i].cnt = 0;
	}
	cloudthink = systemtime;
}

// Does the cloud processesing.
//
void ThinkClouds()
{
	int i;
	
	if (abs(lxwin - xwin) > 50 || abs(lywin - ywin) > 50)
	{
		InitializeClouds();
		return;
	}
		
	for (i=0; i<NUM_CLOUDS; i++)
	{
		_clouds[i].x -= _clouds[i].speed  - ((lxwin-xwin) * 65536);
		_clouds[i].y -= _clouds[i].speed  - ((lywin-ywin) * 65536);
		
		if (_clouds[i].x < 0) _clouds[i].x = Random(480, 640) * 65536;
		if (_clouds[i].y < 0) _clouds[i].y = Random(360, 480) * 65536;
		if (_clouds[i].x > 640*65536) _clouds[i].x = Random(0, 60) * 65535;
		if (_clouds[i].y > 480*65536) _clouds[i].y = Random(0, 10) * 65535;
	}
	lxwin=xwin;
	lywin=ywin;
}

//draws the clouds.  called by RenderWeather()
void RenderClouds()
{
	while (cloudthink<systemtime)
	{
		ThinkClouds();
		cloudthink++;
	}
	
	SetLucent(50);
	int i, zx, zy;
	for (i=0; i<NUM_CLOUDS; i++)
	{
	SetLucent(25);
		zx = _clouds[i].x / 65536 - 160;
		zy = _clouds[i].y / 65536 - 120;
		
		switch (_clouds[i].c)
		{
			case 0: TBlit(zx, zy, _cloud1, screen);
			SetLucent(75);
					TBlit(zx+3, zy+18, _cloud1s, screen);
			case 1: TBlit(zx, zy, _cloud2, screen);
			SetLucent(75);
					TBlit(zx+3, zy+32, _cloud2s, screen);
			case 2: TBlit(zx, zy, _cloud3, screen);
			SetLucent(75);
					TBlit(zx+3, zy+64, _cloud3s, screen);
		}		
	}
	SetLucent(0);
	lxwin = xwin;
	lywin = ywin;
}

/********************************** fog ***********************************/

int _fog = LoadImage("res\system\fog.png");

// Draws the fog.  Called by RenderWeather();
//
void RenderFog()
{
	SetLucent(50);
	WrapBlit((systemtime/4)+xwin, (systemtime/4)+ywin, _fog, screen);
	SetLucent(0);
}

/********************************** rain **********************************/

struct SnowNode 
{
	int x, y;
}

void InitializeRain()
{

}

void InitializeSnow()
{
/*	for (int i=0; i<SnowParticles; i++)
	{
		snow[i].x = rnd(0, SnowScrX);
		snow[i].y = rnd(0, SnowScrY);
	}*/
}