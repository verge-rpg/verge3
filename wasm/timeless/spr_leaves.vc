/************************************************************
 *                          timeless                        *
 *             for verge³ copyright (c)2003 vecna           * 
 ************************************************************/

/*************************** data ***************************/

#define NUM_LEAVES		35

struct myleaf
{
	int x, y;
	int angle;
	int starttime, endtime;
}
myleaf leaves[NUM_LEAVES];

int lspr;

/*************************** code ***************************/

void InitializeLeaves()
{	
	int i;
	
	i = Random(0, 2);
	switch (i)
	{
		case 0: lspr = leaf;
		case 1: lspr = leaf2;
		case 2: lspr = heart;
	}
	
	for (i=0; i<NUM_LEAVES; i++)
	{
		leaves[i].x = Random(0,320)*16;
		leaves[i].y = Random(0,200)*16;
		leaves[i].angle = Random(0,359);
		leaves[i].starttime = systemtime + Random(0, 150);
		leaves[i].endtime = systemtime + Random(650,800);
	}
		
	spr_state = SPR_LEAVES;
	spr_die = systemtime + 800;
	spritetimer = 0;
}

void RenderLeaves()
{
	if (systemtime >= spr_die)
	{
		spr_state = 0;
		return;
	}

	int i;
	while (spritetimer)
	{
		spritetimer--;
		for (i=0; i<NUM_LEAVES; i++)
		{
			switch (leaftbl[leaves[i].angle+systemtime%140/7])
			{	
				case 0: leaves[i].x-=4; leaves[i].y+=4;
				case 1: leaves[i].x-=6; leaves[i].y+=8;
				case 2: leaves[i].x-=8; leaves[i].y+=10;
				case 3: leaves[i].x-=8; leaves[i].y+=12;
				case 4: leaves[i].x-=16; leaves[i].y+=8;
			}
			if (leaves[i].x/16<0-14) leaves[i].x = 334*16;
			if (leaves[i].y/16>214) leaves[i].y = 0-14*16;
		}
	}
	
	for (i=0; i<NUM_LEAVES; i++)
	{	
		if (systemtime > leaves[i].starttime && systemtime < leaves[i].endtime)
			BlitFrameAt(leaves[i].x/16, ybase+(leaves[i].y/16), lspr, leaftbl[leaves[i].angle+systemtime%140/7], screen);
	}
}