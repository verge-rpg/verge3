/************************************************************
 *                          timeless                        *
 *             for verge³ copyright (c)2003 vecna           * 
 ************************************************************/

/***************************
  General TODO:
   + Menu - preference / mode saving. etc
   + Credits in some place
   + A scripted mode!   
  
  Background TODO:
   + Cross-hatch gradient pattern
   + Cross-fading effect (simulate palette morphs)
   + "Background general color" global var for attempted color harmony
   + Improve the shadebobs effect
   + additional "tiled" patterns effect
   + Examine/create more gradient color schemes
   + staggered gradient - generate moire before forming full gradient
    
  Sprites TODO:
   + improve the blowing leafs/blowing hearts
   + Do some things with subtractive blits maybe
****************************/

#include "animation.vc"
#include "resource.vc"
#include "bgr.vc"
#include "sprites.vc"
#include "lens.vc"

/*************************** data ***************************/

// Configuration variables

int ybase, vidmode;

// Global background/effect vars

int bg = NewImage(256,256);
int bg2 = NewImage(256,256);
int bg3 = NewImagE(256,256);

// scrollspeed state variables

int scrollofs;
int scrollspeed = 8, targetspeed = 8;
int scrollpath, nextscroll;

// Skew state variables

int skewofs;
int skewpath, nextskew;
int skewlinesleft;

// Timers

int skewtimer, scrolltimer,  bgrtimer, spritetimer, lenstimer;

/*************************** code ***************************/

void Autoexec()
{
	vidmode = 1;
	switch (vidmode)
	{
		case 0: ybase = 0;
		case 1: ybase = 20;
		case 2: ybase = 30;
	}
	SetClip(0, ybase, 319, 199+ybase, screen);
	
	int r = Random(0,5);
	switch (r)
	{
		case 0:	PlayMusic("music/rain.s3m");
		case 1: PlayMusic("music/zcs-02-intro.xm");
		case 2: PlayMusic("music/zk-jdood.it");
		case 3:	PlayMusic("music/verge6.it");
		case 4: PlayMusic("music/lib-grey.xm");
		case 5: PlayMusic("music/sully-columns.it");
	}

	InitTables();
	HookTimer("MyTimer");
	
	scrollpath = 0;
	nextscroll = systemtime+700;
	nextskew = systemtime+800;

	int i;
	for (i=0; i<100; i++)
		_skewlines[i] = 1;

	RectFill(0, 0, 256, 256, 0, bg);
	InitializeBGR5();
	
	while (!key[SCAN_ESC])
	{
		UpdateControls();
		CalculateScroll();
		CheckSkew();
		UpdateBackground();
		if (!key[SCAN_LANGLE])
			SuperSecretThingy(scrollofs / 16, systemtime/2, ybase, bg, screen);
		else
			WrapBlit(0, 0, bg, screen);		
 		RenderSprites();
		RenderLens();
		ShowPage();
	}
	
	timer = 0;
	while (timer<300)
	{
		UpdateControls();
		CalculateScroll();
		CheckSkew();
		UpdateBackground();
		SuperSecretThingy(scrollofs/16, systemtime/2, ybase, bg, screen);
		RenderSprites();
		RenderLens();
		SetLucent(100-(timer/3));
		RectFill(0, ybase, 320, ybase+200, 0, screen);
		SetLucent(0);
		ShowPage();
	}
	Exit("");
}

void CheckScrollPath()
{
	if (systemtime > nextscroll)
	{
		if (scrollpath == 0) { scrollpath = 1; nextscroll = systemtime + 1100; targetspeed = 0-20; return; }
		if (scrollpath == 1) { scrollpath = 2; nextscroll = systemtime + 1300; targetspeed = 16;   return; }
		if (scrollpath == 2) { scrollpath = 3; nextscroll = systemtime + 1100; targetspeed = 0-20; return; }
		if (scrollpath == 3) { scrollpath = 0; nextscroll = systemtime + 1300; targetspeed = 8;    return; }
	}
}

void Calculatescroll()
{
	CheckscrollPath();
		
	while (scrolltimer)
	{
		if (scrollspeed < targetspeed) scrollspeed++;
		if (scrollspeed > targetspeed) scrollspeed--;
		scrollofs += scrollspeed;
		scrolltimer--;
	}
}

void CheckSkewPath()
{
	if (systemtime > nextskew)
	{
		skewlinesleft = 100;
		skewtimer = 0;
		
		if (skewpath == 0) { skewpath = 1; nextskew = systemtime + 2000; return; }
		if (skewpath == 1) { skewpath = 2; nextskew = systemtime + 1500; return; }
		if (skewpath == 2) { skewpath = 3; nextskew = systemtime + 1000; return; }
		if (skewpath == 3) { skewpath = 0; nextskew = systemtime + 1500; return; }
	}
}

void CheckSkew()
{
	int skewval;
	CheckSkewPath();
	
	while (skewlinesleft && skewtimer>1)
	{
		skewtimer -= 2;
		switch (skewpath)
		{
			case 0: skewval = 1;
			case 1: skewval = 0-3;
			case 2: skewval = 5; 
			case 3: skewval = 0;
		}
		_skewlines[100-skewlinesleft] = skewval;
		skewlinesleft--;
	}
}

void UpdateBackground()
{
	if (bgrtimer)
	{
		bgrtimer--;
		CallFunction(bgrproc);		
	}
}

void MyTimer()
{
	scrolltimer++;
	skewtimer++;
	bgrtimer++;
	spritetimer++;
	lenstimer++;	
}

void ScaleWrapBlit(int dx, int dy, int srcimg, int dw, int dh, int dest)
{
	int img = NewImage(dw, dh);
	ScaleBlit(0, 0, dw, dh, srcimg, img);
	int mx = dx-(dw/2);
	int my = dy-(dh/2);
	if (mx<0) mx += 255;
	if (my<0) my += 255;
	BlitWrap(mx, my, img, dest);
	FreeImage(img);
}