// ----------------------------------------------------------- --- -- -
// Mythril's Keyboard handling code. Messed about with and converted
// to v3 by Fred. Now ignores anything that might be misinterpreted
// as a token ending (helpful when writing SAVE file formats, if you're
// in to that sort of thing..) 
// The cursor effect has also been marginally improved. Which is nice.
// ----------------------------------------------------------- --- -- -

int Caps;
string OldKey, write, write2;
int XPos;

// The heart of the code. Run this in a While(!b1) loop to prompt the player to type
// something in. Requires X and Y co-ords for placement and the maximum number of letters
// that can fit in the string as arguements.

void Input(int x1,int y1,int max)
{
	string AsKey;
	if (left && XPos>0)
		{
		XPos--;
		Unpress(7);
		}
	if (right && XPos<len(write))
		{
		XPos++;
		Unpress(8);
		}
	AsKey = GetKey();
	if (!strcmp(AsKey,"Back") && XPos>0)
		{
		write2=left(write,XPos-1)+right(write,len(write)-XPos);
		XPos--;
		write=write2;
		AsKey="";
		}
	if (!strcmp(AsKey,"Delete") && XPos<len(write))
		{
		write2=left(write,XPos)+right(write,len(write)-XPos-1);
		write=write2;
		AsKey="";
		}
	if (!strcmp(AsKey,"Back") || !strcmp(AsKey,"Delete")) AsKey="";
	if (len(write)<max)
		{
		write2=left(write,XPos)+AsKey+right(write,len(write)-XPos);
		write=write2;
		if (strcmp(AsKey,"")) XPos++;
		}

	PrintString(x1, y1, screen, font[inputfont],write);
	if (timer%100<50)
		{
		RectFill(TextWidth(font[inputfont], write)+x1, y1, (TextWidth(font[inputfont], write)+x1)+4, y1+(fontheight-2), rgb(1,1,1), screen);
		RectFill(TextWidth(font[inputfont], write)+x1, y1, (TextWidth(font[inputfont], write)+x1)+3, y1+(fontheight-3), rgb(255,255,255), screen);
		}
}

// Returns the letter or symbol of the pressed key

string GetKey()
{
	String AsKey;
	String key1, key2;
	
	     if (key[ 2]) { key1="1"; key2="1"; }
	else if (key[ 3]) { key1="2"; key2="2"; }
	else if (key[ 4]) { key1="3"; key2="3"; }
	else if (key[ 5]) { key1="4"; key2="4"; }
	else if (key[ 6]) { key1="5"; key2="5"; }
	else if (key[ 7]) { key1="6"; key2="6"; }
	else if (key[ 8]) { key1="7"; key2="7"; }
	else if (key[ 9]) { key1="8"; key2="8"; }
	else if (key[10]) { key1="9"; key2="9"; }
	else if (key[11]) { key1="0"; key2="0"; }
	else if (key[12]) { key1="_"; key2="-"; }

	else if (key[16]) { key1="Q"; key2="q"; }
	else if (key[17]) { key1="W"; key2="w"; }
	else if (key[18]) { key1="E"; key2="e"; }
	else if (key[19]) { key1="R"; key2="r"; }
	else if (key[20]) { key1="T"; key2="t"; }
	else if (key[21]) { key1="Y"; key2="y"; }
	else if (key[22]) { key1="U"; key2="u"; }
	else if (key[23]) { key1="I"; key2="i"; }
	else if (key[24]) { key1="O"; key2="o"; }
	else if (key[25]) { key1="P"; key2="p"; }

	else if (key[30]) { key1="A"; key2="a"; }
	else if (key[31]) { key1="S"; key2="s"; }
	else if (key[32]) { key1="D"; key2="d"; }
	else if (key[33]) { key1="F"; key2="f"; }
	else if (key[34]) { key1="G"; key2="g"; }
	else if (key[35]) { key1="H"; key2="h"; }
	else if (key[36]) { key1="J"; key2="j"; }
	else if (key[37]) { key1="K"; key2="k"; }
	else if (key[38]) { key1="L"; key2="l"; }

	else if (key[44]) { key1="Z"; key2="z"; }
	else if (key[45]) { key1="X"; key2="x"; }
	else if (key[46]) { key1="C"; key2="c"; }
	else if (key[47]) { key1="V"; key2="v"; }
	else if (key[48]) { key1="B"; key2="b"; }
	else if (key[49]) { key1="N"; key2="n"; }
	else if (key[50]) { key1="M"; key2="m"; }

	//if (key[57]) { key1=" "; key2=" "; }
	else if (key[58]) { key1="Caps"; key2="Caps"; }
	else if (key[14]) { key1="Back"; key2="Back"; }
	else if (key[83]) { key1="Delete"; key2="Delete"; }

	if (key[42] || key[54] || Caps) AsKey = key1;
	else AsKey = key2;

	if (!strcmp(key1,OldKey)) AsKey="";
	else OldKey=key1;
	if (!strcmp(AsKey,"Caps"))
		{
		AsKey="";
		if (Caps) Caps=0;
		else Caps=1;
		}
	return AsKey;
}