
string save_header = "ROBOTO GAME SAVE";

int map_loading_atm_come_back_later;

string gSaveInfo[5];

int ReadHeader(int f)
{
	string s = FileReadString(f);
	if (!strcmp(s, save_header))
	{
		return 1;
	}
	return 0;
}

void SaveGame(int slot)
{
	int i,f;
	
	f = FileOpen("save" + str(slot) + ".sav",2);
	
	FileWriteString(f, save_header);
	//Current map name / player x/y.
	FileWriteString(f, gMap);
	FileWriteQuad(f, entity.x[gPlayer]);
	FileWriteQuad(f, entity.y[gPlayer]);
	FileWriteQuad(f, entity.face[gPlayer]);
	
	//Time of save for loading purposes
	FileWriteString(f, str(sysdate.year));
	FileWriteString(f, str(sysdate.month));
	FileWriteString(f, str(sysdate.day));
	
	FileWriteString(f, str(systime.hour));
	FileWriteString(f, str(systime.minute));
	
	//Load flags and door flags, as well as glyph definitions
	
	for (i = 0; i < FLAG_NUMBER; i++)
	{
		FileWriteQuad(f, gFlags[i]);
	}
	
	for (i = 0; i < DOOR_NUMBER; i++)
	{
		FileWriteQuad(f, gDoorFlags[i]);
	}
	
	for (i = 0; i < 100; i++)
	{
		FileWriteString(f, GlyphDefinition[i]);
	}
	
	for (i = 1; i < val(gRoomList[0]); i++)
	{
		if (DictContains(gRoomFlags, gRoomList[i]))
		{
			FileWriteQuad(f, 1);
		}
		else
		{
			FileWriteQuad(f,0);
		}
	}	
	
	FileClose(f);
}

void LoadGame(int slot)
{
	int i,f;
	string mmap;
	int x;
	int y;
	int head;
	
	f = FileOpen("save" + str(slot) + ".sav",1);
	if (!f)
	{
		Log("File couldn't be read.");
		FileClose(f);
		return;
	}
	
	
	//Current map name / player x/y.
	head = ReadHeader(f);
	if (!head)
	{
		Log("Bad header.");
		FileClose(f);
		return;
	}
	mmap = FileReadString(f);
	x =  FileReadQuad(f);
	y =  FileReadQuad(f);
	gPlayerFace =  FileReadQuad(f);
	
	//Ignore time/date when loading
	FileReadString(f);
	FileReadString(f);
	FileReadString(f);
	
	FileReadString(f);
	FileReadString(f);
	
	//Load flags and door flags, as well as glyph definitions
	
	for (i = 0; i < FLAG_NUMBER; i++)
	{
		gFlags[i] = FileReadQuad(f);
	}
	
	for (i = 0; i < DOOR_NUMBER; i++)
	{
		gDoorFlags[i] = FileReadQuad(f);
	}
	
	for (i = 0; i < 100; i++)
	{
		GlyphDefinition[i] = FileReadString(f);
	}
	
	for (i = 1; i < val(gRoomList[0]); i++)
	{
		if (DictContains(gRoomFlags, gRoomList[i]))
		{
			FreeImage(DictGetInt(gRoomFlags, gRoomList[i]));
		}
	}	
	
	DictFree(gRoomFlags);
	gRoomFlags = DictNew();
	
	for (i = 1; i < val(gRoomList[0]); i++)
	{
		if ( FileReadQuad(f) == 1)
		{
			DictSetInt(gRoomFlags, gRoomList[i], LoadImage("minimaps/"+gRoomList[i]+".png"));
		}
	}		
	
	FileClose(f);
	AddUpdate("CloseGUI");
	
	gFlags[FLAG_TELEPORTING] = 0;
	map_loading_atm_come_back_later = 1;
	WarpTo(x / 16, y / 16, mmap);
}

void GetSaveGameInfo(int slot)
{
	//Returns date and time information of a save slot.
	
	int time_pm;
	int f;
	int head;
	
	f = FileOpen("save" + str(slot) + ".sav",1);
	if (!f)
	{
		Log("File couldn't be read. Failed to allocate save info.");
		SaveInfoForUnsavedGame();
		FileClose(f);
		return;
	}

	head = ReadHeader(f);
	
	if (!head)
	{
		Log("Bad header. Failed to allocate save info.");
		SaveInfoForUnsavedGame();
		FileClose(f);
		return;
	}

	FileReadString(f); // map
	FileReadQuad(f); // x
	FileReadQuad(f); // y
	FileReadQuad(f); // face

	gSaveInfo[save_year] = FileReadString(f);	
	gSaveInfo[save_month] = FileReadString(f);
	gSaveInfo[save_day] = FileReadString(f);
	
	gSaveInfo[save_hour] = FileReadString(f);
	if (val(gSaveInfo[save_hour]) >= 12)
	{
		gSaveInfo[save_hour] = str(val(gSaveInfo[save_hour]) - 12);
		time_pm = 1;
	}
	if (val(gSaveInfo[save_hour]) == 0)
	{
		gSaveInfo[save_hour] = "12";
	}
	if (len(gSaveInfo[save_hour]) == 1)
	{
		gSaveInfo[save_hour] = "0" + gSaveInfo[save_hour];	
	}
	gSaveInfo[save_minute] = FileReadString(f);
	if (len(gSaveInfo[save_minute]) == 1)
	{
		gSaveInfo[save_minute] = "0" + gSaveInfo[save_minute];
	}
	if (time_pm)
	{
		gSaveInfo[save_minute] = gSaveInfo[save_minute] + " pm";
	}
	else
	{
		gSaveInfo[save_minute] = gSaveInfo[save_minute] + " am";
	}
	
	FileClose(f);
}

void SaveInfoForUnsavedGame()
{
	gSaveInfo[save_year] = "Unsaved";
	gSaveInfo[save_month] = "";
	gSaveInfo[save_day] = "";
	gSaveInfo[save_hour] = "";
	gSaveInfo[save_minute] = "";
}