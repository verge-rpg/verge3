//collection 20 = input glyphs
//collection 21 = output glyphs

int gCurrentGlyphSet; //Contains the offset of the selection of output glyphs being displayed. Or something.
int gCurrentGlyphOutput[10];
int gCurrentGlyphOutputLength;
int gGlyphOutputLengthMax;
//Output glyphs = list of player commands, input glyphs = list of player glyphs for the player to click to add.

int gCurrentCollectionInput; //Special variables for glyph input widgets.
int gCurrentSubCollectionInput; //^

int gInputLanguage; // 0 = english, 1 = alien

void AddInput(int Collection, int x, int y, int w, int size)
{
	//uid = size of input panel
	AddToCollection(Collection, x+90, y+10, w, -1, -1,-1, "Input",str(size), "", "Norm",str(size));
    AddRectangle(Collection, x+80, y, w, 80, RGB(192,192,192), RGB(128,128,128));
    AddRectangle(Collection, x, y+85, w+80, 26, RGB(128,128,128), RGB(0,0,0));
	AddButton(Collection,x, y, -1,"iGlyphInputUp");
	AddButton(Collection,x+40, y, -1,"iGlyphInputDown");
    AddGlyph(Collection, x+12, y+14, glyph_INPUT);
    AddGlyph(Collection, x+12, y+32, glyph_LIST);
    AddGlyph(Collection, x+12, y+50, glyph_LEFT);
    AddGlyph(Collection, x+52, y+14, glyph_INPUT);
    AddGlyph(Collection, x+52, y+32, glyph_LIST);
    AddGlyph(Collection, x+52, y+50, glyph_RIGHT);
    AddGlyph(Collection, x+10, y+90, glyph_OUTPUT);
    
	gGlyphOutputLengthMax = size;
	gCurrentGlyphOutputLength = 0;
	
	gCurrentGlyphSet = 0;
	
	int i;
}

void AddGlyphList(int Collection, int x, int y, int w, int size)
{
	//uid = size of input panel
	gInputLanguage = 0;
	AddToCollection(Collection, x+40, y+10, w, -1, -1,-1, "Input","", "", "",str(size));
    AddRectangle(Collection, x+40, y, w, 80, RGB(192,192,192), RGB(128,128,128));
    //AddRectangle(Collection, x, y+85, w+80, 26, RGB(128,128,128), RGB(0,0,0));
	AddButton2(Collection,x+30, y+100, -1,"iGlyphInputUp");
	AddButton2(Collection,x+130, y+100, -1,"iGlyphInputDown");
	AddText(Collection, x+30+10, y+100+10, "Up");
	AddText(Collection, x+130+10, y+100+10, "Down");

    
	gGlyphOutputLengthMax = size;
	gCurrentGlyphOutputLength = 0;
	
	gCurrentGlyphSet = 0;
	
	int i;
}

void iInputUpdate()
{
	gCurrentCollectionInput = gCurrentCollection;
	gCurrentSubCollectionInput = gCurrentSubCollection;
	
	if (!strcmp(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction3,"Norm"))
	{
		gInputLanguage =1;
	}
	else
	{
		gInputLanguage = 0;
	}	
	
	gGlyphOutputLengthMax = val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction4);
	
	if (!strcmp(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction2,"") && !IsUpdateString("CloseGUI"))
		{
			GenerateInputGlyphList();
			gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction2 = "1";
		}
		
	if (IsUpdateString("CloseGUI"))
	{
		gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction2 = "";
	}
}

//////////////////////////////////////////////////////////////

void AddInputGlyph(int Collection,int x,int y, int glyph, string outin, string number)
{
	//out/in whether it's an output glyph or an input glyph.
	
	AddToCollection(Collection, x, y, 16, 16, glyph,glyph, "GlyphInput",str(glyph), "0", outin,number);

}

void iGlyphInputUpdate()
{
	int Glyph;
	
	Glyph = val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1);
	
	if (mouse.l)
	{
		if (DetectCollision(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x,
			  		      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
					      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w,
					      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h,
					      mouse.x, mouse.y, 0, 0))
					      
		{
			
			if (!strcmp(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction3,"out"))
			{
				iGlyphRemoveOutput(val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction4));
			}
			else
			{
				iGlyphAddOutput(Glyph);
			}
			
            RemoveCollectionNum(2);
			mouse.l = 0;	
		}
		
		
	}
				
}

void iGlyphInputRender()
{
	
	SetLucent(gGUIFade);
	
	if (!strcmp(GlyphDefinition[val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1)] ,""))
	{
		TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, 
		       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
		       GetGlyphImage(GlyphImage[gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image]+".png"),
		       screen);		
	}
	
	else
	{
		TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, 
		       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
		       GetGlyphImage(GlyphImage[gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image]+"g.png"),
		       screen);	
	}

	
	if (DetectCollision(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x,
				 gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
				 gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w,
				 gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h,
				 mouse.x, mouse.y, 0, 0) )
					      
	{
		TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, 
		       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
		       GetGlyphImage(GlyphImage[gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image]+"y.png"),
		       screen);		

		if (strcmp(GlyphDefinition[val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1)] ,"") )
		{
			PrintString(mouse.x,mouse.y-10,screen,gFont, GlyphDefinition[val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1)]);
		}		
	}

	SetLucent(0);
}

void iGlyphInputDescription()
{
	SetLucent(gGUIFade);

	if (DetectCollision(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x,
				 gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
				 gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w,
				 gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h,
				 mouse.x, mouse.y, 0, 0) )
					      
	{
		if (strcmp(GlyphDefinition[val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1)] ,"") )
		{
			PrintString(mouse.x,mouse.y-10,screen,gFont, GlyphDefinition[val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1)]);
		}		
	}	

	SetLucent(0);
}

//////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
//Output glyphs = list of player commands, 
//input glyphs = list of player glyphs for the player to click to add.

void iGlyphInputDown()
{
    RemoveCollectionNum(2);
    
	if (gCurrentGlyphSet < DefinedGlyphList[0]-13)
		gCurrentGlyphSet+=6;
	
	gInput = 0;
	GenerateInputGlyphList();
}

void iGlyphInputUp()
{
    
    RemoveCollectionNum(2);
    
	if (gCurrentGlyphSet > 5)
		gCurrentGlyphSet-=6;
	gInput = 0;
	GenerateInputGlyphList();
}

void iGlyphAddOutput(int glyph)
{
	if (gCurrentGlyphOutputLength < gGlyphOutputLengthMax)
	{
		gCurrentGlyphOutput[gCurrentGlyphOutputLength] = glyph;
		gCurrentGlyphOutputLength++;
	
		GenerateOutputGlyphList();
	}
}

void iGlyphRemoveOutput(int n)
{
	int i;
	
	if (gCurrentGlyphOutputLength >0)
	{
	
		for (i = n; i < gCurrentGlyphOutputLength-1; i++)
		{
			gCurrentGlyphOutput[i] = gCurrentGlyphOutput[i+1];
		}
	
	}
	
	gCurrentGlyphOutputLength--;
	
	GenerateOutputGlyphList();
}

void GenerateInputGlyphList()
{
    int perRow = (gGUI_Collections[gCurrentCollectionInput][gCurrentSubCollectionInput].w - 18) / 18;
    int i,i2, mp;
    
    int x, y, w;
    x = gGUI_Collections[gCurrentCollectionInput][gCurrentSubCollectionInput].x;
    y = gGUI_Collections[gCurrentCollectionInput][gCurrentSubCollectionInput].y;
    w = gGUI_Collections[gCurrentCollectionInput][gCurrentSubCollectionInput].w;
    
	ClearCollection(20);
	GetDefinedGlyphs();
	
	i2 = 0;
    
	for (i =gCurrentGlyphSet+1; i < DefinedGlyphList[0]+1; i++)
	{
		if (DefinedGlyphList[0] >= i)
		{
			
            if (i2/perRow < 2)
            {
                AddInputGlyph(20, x+(18*(i2%perRow)), y+20+(18*(i2/perRow)), DefinedGlyphList[i], "in", "");
            }
            i2++;
		}
	}
    
    mp = (w - 54) / 2;
    
    if (gInputLanguage)
    {
    
	    AddGlyph(20, x, y-5, glyph_INPUT);
	    AddGlyph(20, x+18, y-5, glyph_LIST);
	    
	    AddGlyph(20, x+w-54, y-5, 29+ ((gCurrentGlyphSet+1)/10));
	    AddGlyph(20, x+w-36, y-5, 29+ ((gCurrentGlyphSet+1)%10));
     }
     else
     {
	    AddText(20, x+1, y-5, "Selection: "+str(gCurrentGlyphSet+1));
     }
}

void GenerateOutputGlyphList()
{
	ClearCollection(21);
	
	int i;
	
	for (i =0; i <  gCurrentGlyphOutputLength; i++)
	{
		AddInputGlyph(21, gGUI_Collections[gCurrentCollectionInput][gCurrentSubCollectionInput].x-50+(17*i),
					  gGUI_Collections[gCurrentCollectionInput][gCurrentSubCollectionInput].y+80, 
					  gCurrentGlyphOutput[i] , "out", str(i) );
	}
}

//////////////////////////////////////////////////////

void iRobotGo()
{
    int g, i, last, valid = 1;
    int error=-1;
    string ms = "";
    last = -1;
    
    RemoveCollectionNum(2);
    
    for (i=0; i<gCurrentGlyphOutputLength; i++)
    {
        if (valid)
        {
            g = gCurrentGlyphOutput[i]; 
            if (last == glyph_RIGHT || last == glyph_OFF)
            {
                if (g >= glyph_0 && g <= glyph_9)
                {
                    if (last == glyph_RIGHT)
                    {
                        ms += "r" + str((g-29)*2) + " ";
                    }
                    else
                    {
                        ms += "w" + str((g-29)*25) + " ";
                    }
                }
                else
                {
                    valid = 0;
                    error = g;
                }
            }
            else if (last >= glyph_0 && last <= glyph_9)
            {
                if (g == glyph_RIGHT)
                {
                }
                else if (g == glyph_OFF)
                {
                }
                else
                {
                    valid = 0;
                    error = g;
                }
            }
            last = g;
        }
    }
    
    if (valid && gCurrentGlyphOutputLength && !(gCurrentGlyphOutputLength%2) && last != glyph_RIGHT && last != glyph_OFF)
    {
        EntityMove(gDrill2, ms);
        SetCameraTarget(gDrill2, 50);
        AddUpdate("CloseGUI");
    }
    else
    {
        PlaySound(sfx_error, 50);
        AddCollection(2);
    }
}

void iDoorDrillOpen()
{
    if (gFlags[FLAG_DRILL_COMPLETED])
        iDoorOpen();
    else
    {
        PlaySound(sfx_error, 50);
        AddCollection(4);
    }
}

void iDoorDrillClose()
{
    iDoorClose();
}

//////////////////////////////////////////////////

 void AddText(int Collection, int x, int y, string Text)
 {
 	
 	AddToCollection(Collection, x, y, -1, -1, -1, -1, "Text",Text, "", "","");
 }
 void iTextRender()
 {
 	SetLucent(gGUIFade);
 	
 	PrintString(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, screen, gFont, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1);
 	
 	SetLucent(0);
 }
 
//////////////////////////////////////////////////

 void AddSmallText(int Collection, int x, int y, string Text)
 {
 	
 	AddToCollection(Collection, x, y, -1, -1, -1, -1, "SmallText",Text, "", "","");
 }
 
 void iSmallTextRender()
 {
 	SetLucent(gGUIFade);
 	
 	PrintString(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, screen, 0, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1);
 	
 	SetLucent(0);
 }
 
///////////////////////////////////////////////////

 void AddImage(int Collection, int x, int y, int image, int blink)
{ 	
	AddToCollection(Collection, x, y, ImageWidth(image), ImageHeight(image), image, -1, "Image",str(blink), "", "","");
}

void iImageRender()
 {
 	SetLucent(gGUIFade);
 	
	//TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);

	if (val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1) == 0)
	{

TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
		      
	}
	else
	{
		if (((systemtime/85)%2))
		{
TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
		
		}
	}

 	SetLucent(0);
 }
 
 ///////////////////////////////////////////////////
 
  void AddGlowingImage(int Collection, int x, int y, int image)
 { 	
 	AddToCollection(Collection, x, y, ImageWidth(image), ImageHeight(image), image, -1, "GlowingImage", "", "", "","");
 }
 
 void iGlowingImageRender()
  {
 
  	
 	//TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
 SetLucent(min(max(gGUIFade + ((100 - gGUIFade) * (50 + (sin(systemtime) * 50 >> 16)) / 100), 25), 75));
 TSubtractiveBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
 SetLucent(gGUIFade);
 TAdditiveBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
 
  	SetLucent(0);
 }
 
 
 //////////////////////////////////////////////////
 
 void AddImage2x(int Collection, int x, int y, int image, int blink)
{ 	
	AddToCollection(Collection, x, y, ImageWidth(image), ImageHeight(image), image, -1, "Image2x",str(blink), "", "","");
}

void iImage2xRender()
 {
 	SetLucent(gGUIFade);
 	
	//TBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);

	if (val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1) == 0)
	{

        SetLucent(50 + (gGUIFade/2));
        
		TScaleBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, 
			      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, 
			      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w*2,
			      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h*2,
			      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
        
	}
	else
	{
		if (((systemtime/50)%2))
		{   
            SetLucent(50 + (gGUIFade/2));
        }
        
        TScaleBlit(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, 
				      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, 
				      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w*2,
				      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h*2,
				      gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);
		
	}

 	SetLucent(0);
 }
 
 ///////////////////////////////////////////////////
 
void AddTransparentRectangle(int Collection, int x, int y, int w, int h, int c1, int c2, int t)
{
	
	AddToCollection(Collection, x, y, w, h, c1, c2, "TransparentRectangle",str(t), "", "","");
}

void iTransparentRectangleRender()
{
	if (gGUIFade != 0)
	{
		SetLucent(val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1)+gGUIFade);
	}
	else
	{
		SetLucent(val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1));
	}
	
	RectFill(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x+gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y+gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].uid,screen);	       
	
	Rect(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x+gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y+gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);	
	
	SetLucent(0);
}

///////////////////////////////////////////////////////

void AddRectVGrad(int Collection, int x, int y, int w, int h, int c1, int c2)
{
	AddToCollection(Collection, x, y, w, h, c1, c2, "RectVGrad", "", "", "","");
}

void iRectVGradRender()
{
	
	RectVGrad(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x+gGUI_Collections[gCurrentCollection][gCurrentSubCollection].w,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y+gGUI_Collections[gCurrentCollection][gCurrentSubCollection].h,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].uid,
	       gGUI_Collections[gCurrentCollection][gCurrentSubCollection].Image, screen);	
	
	SetLucent(0);
}

///////////////////////////////////////////////////////


///////////////////////////////////////////////////////

void AddFadeText(int Collection, int x, int y, string Text)
 {
 	
 	AddToCollection(Collection, x, y, -1, -1, -1, -1, "FadeText",Text, "100", "0","0");
 }
 
void iFadeTextRender()
 {

	SetLucent(val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction2));

 	PrintString(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].x, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].y, screen, gFont, gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction1);
 	
 	SetLucent(0);
 }
 
 void iFadeTextUpdate()
 {
	int fade, inout, wat;
	
	fade= val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction2);
	inout = val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction3);
	wat = val(gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction4);
	 
	if (inout == 3)
	{
		return;
	}
	
	if (inout == 0)
	{
		fade -= 1;
		if (fade == 0)
			inout = 1;
	}
	if (inout == 1)
	{
		wat++;
		
		if (wat == 200)
		{
			inout = 2;
		}
	}
	
	if (inout == 2)
	{
		fade += 1;
		if (fade == 100)
			inout = 3;
	}
	
	gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction2 = str(fade);
	gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction3 = str(inout);
	gGUI_Collections[gCurrentCollection][gCurrentSubCollection].SpecialFunction4 = str(wat);
 }

///////////////////////////////////////////////////////

void iNumPasswordCheck()
{
    int i, valid = 1, correct = 0;
    
    RemoveCollectionNum(2);
    RemoveCollectionNum(3);
    
    if (gCurrentGlyphOutputLength < 4)
        valid = 0;
        
    for (i=0; i<gCurrentGlyphOutputLength; i++)
    {
        if (valid)
            if (gCurrentGlyphOutput[i] < glyph_0 || gCurrentGlyphOutput[i] > glyph_9)
                valid = 0;
    }
    
    if (valid)
    {
        if (gCurrentGlyphOutput[0] == glyph_8 && gCurrentGlyphOutput[1] == glyph_7 && gCurrentGlyphOutput[2] == glyph_3 && gCurrentGlyphOutput[3] == glyph_0)
            correct = 1;
    }
    
    if (!valid)
        AddCollection(2);
    else if (!correct)
        AddCollection(3);
    else
        iDoorOpen();
}

///////////////////////////////////////////////////////

void iDirPasswordCheck()
{
    int i, valid = 1, correct = 0;
    
    RemoveCollectionNum(2);
    RemoveCollectionNum(3);
    
    if (gCurrentGlyphOutputLength < 8)
        valid = 0;
        
    for (i=0; i<gCurrentGlyphOutputLength; i++)
    {
        if (valid)
            if (gCurrentGlyphOutput[i] != glyph_UP && gCurrentGlyphOutput[i] != glyph_DOWN && gCurrentGlyphOutput[i] != glyph_LEFT && gCurrentGlyphOutput[i] != glyph_RIGHT)
                valid = 0;
    }
    
    if (valid)
    {
        if (gCurrentGlyphOutput[0] == glyph_UP && gCurrentGlyphOutput[1] == glyph_RIGHT && gCurrentGlyphOutput[2] == glyph_RIGHT && gCurrentGlyphOutput[3] == glyph_LEFT && gCurrentGlyphOutput[4] == glyph_DOWN && gCurrentGlyphOutput[5] == glyph_UP && gCurrentGlyphOutput[6] == glyph_RIGHT && gCurrentGlyphOutput[7] == glyph_DOWN)
            correct = 1;
    }
    
    if (!valid)
        AddCollection(2);
    else if (!correct)
        AddCollection(3);
    else
        iDoorOpen();
}

////////////////////////////////////////////////////////

int gNamesPage = 0;

void iNamesNext()
{
    RemoveCollection(gNamesPage+1);
    gNamesPage = gNamesPage ^ 1;
    AddCollection(gNamesPage+1);
}

////////////////////////////////////////////////////////

void AddEmailGlyphs(int coll, int x, int y, string glyphs)
{
    int c, i = 0;
    
    for (i=0; i<len(glyphs); i++)
    {
        c = val(mid(glyphs, i, 1));
        AddGlyph(coll, x + ((i%12)*18), y + ((i/12)*18), c+29);
    }
}

void iEmailGlyphConvert()
{
    int c, valid = 1;
    string o;
    
    RemoveCollectionNum(7);
    RemoveCollectionNum(8);
    
    if (gCurrentGlyphOutputLength)
    {
        c = gCurrentGlyphOutput[0];
        
        switch (c)
        {
            case glyph_ON: o = "2359";
            case glyph_OFF: o = "1884";
            case glyph_OPEN: o = "0998";
            case glyph_CLOSE: o = "4711";
            case glyph_TOOMUCH: o = "7400";
            case glyph_LEFT: o = "6363";
            case glyph_RIGHT: o = "9245";
            case glyph_UP: o = "1480";
            case glyph_DOWN: o = "5122";
            case glyph_RESET: o = "8741";
            case glyph_HOT: o = "3458";
            case glyph_COLD: o = "9323";
            case glyph_ROOM1: o = "7514";
            case glyph_ROOM2: o = "9874";
            case glyph_ROOM3: o = "4126";
            case glyph_ROOM4: o = "9084";
            case glyph_BOB: o = "4509";
            case glyph_INSERT: o = "1425";
            case glyph_REMOVE: o = "5623";
            case glyph_BATTERY: o = "6902";
            case glyph_COMPUTER: o = "9619";
            case glyph_ERROR: o = "5398";
            case glyph_YES: o = "2152";
            case glyph_NO: o = "6790";
            case glyph_DRILL: o = "4521";
            case glyph_INPUT: o = "6939";
            case glyph_OUTPUT: o = "2399";
            case glyph_LIST: o = "4523";
            case glyph_CAMERA: o = "0002";

            case glyph_0: o = "4231";
            case glyph_1: o = "4520";
            case glyph_2: o = "6753";
            case glyph_3: o = "1783";
            case glyph_4: o = "2135";
            case glyph_5: o = "4217";
            case glyph_6: o = "7538";
            case glyph_7: o = "9823";
            case glyph_8: o = "1490";
            case glyph_9: o = "6874";
            
            default: valid = 0;
        }
        
        ClearCollection(8);
        
        AddGlyph(8, 25, 35, c);
        AddEmailGlyphs(8, 61, 35, o);
        
        AddCollection(8);
    }
    else
    {
        valid = 0;
    }
    
    if (!valid)
        AddCollection(7);
        
}

int gEmailPage = 0;

void iEmailNext()
{
    RemoveCollectionNum(gEmailPage*2+2);
    RemoveCollectionNum(gEmailPage*2+3);
    gEmailPage = gEmailPage ^ 1;
    AddCollection(gEmailPage*2+2);
    AddCollection(gEmailPage*2+3);
}

///////////////////////////////////////////////////

void iNavRoomLoc()
{
    int c, d, valid = 1;
    
    RemoveCollectionNum(2);
    
    if (gCurrentGlyphOutputLength)
    {
        c = gCurrentGlyphOutput[0];
        
        switch (c)
        {
           case glyph_ROOM1: d = glyph_LEFT;
           case glyph_ROOM2: d = glyph_RIGHT;
           case glyph_ROOM4: d = glyph_DOWN;
           
           default: valid = 0;
        }
        
        if (valid)
        {
            ClearCollection(3);
            
            AddGlyph(3, 25, 35, c);
            
            AddGlyph(3, 61, 35, d);
            
            AddCollection(3);
        }
    }
    else
    {
        valid = 0;
    }
    
    if (!valid)
        AddCollection(2);
}

////////////////////////////////////////////////////////////

void iNameCheck()
{
    int c, valid = 1;
    
    RemoveCollectionNum(2);
    
    if (gCurrentGlyphOutputLength)
    {
        c = gCurrentGlyphOutput[0];
        
        if (gCurrentGlyphOutput[0] != glyph_BOB)
            valid = 0;
    }
    else
    {
        valid = 0;
    }
    
    if (!valid)
        AddCollection(2);
    else
        iDoorOpen();
}