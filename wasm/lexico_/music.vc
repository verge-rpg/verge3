#define GAME_MUSIC_MAX_COUNT	6

struct game_music_type
{
	int used;
	int song;
	int playing;
	int paused;
	int timestamp;
	int fade_duration;
	int start_volume;
	int end_volume;
};

int song_ambient = LoadGameMusic("music/ambient.mp3");
int song_computer = LoadGameMusic("music/computerRoom.mp3");
int song_credits = LoadGameMusic("music/credits.mp3");
int song_manufacturing = LoadGameMusic("music/manufacturing.mp3");
int song_title = LoadGameMusic("music/title.mp3");
int song_conveyor = LoadSong("music/conveyorloop.mp3");

int game_music_active = -1;
game_music_type game_music[GAME_MUSIC_MAX_COUNT];

int LoadGameMusic(string filename)
{
	int i;
	for (i = 0; i < GAME_MUSIC_MAX_COUNT; i++)
	{
		if (!game_music[i].used)
		{
			game_music[i].used = 1;
			game_music[i].paused = 0;
			game_music[i].song = LoadSong(filename);
			game_music[i].start_volume = 0;
			game_music[i].end_volume = 0;
			game_music[i].timestamp = 0;
			game_music[i].fade_duration = 0;
			Log("LoadGameMusic :: Allocated song " + filename + " at handle " + str(i));
			return i;
		}
	}
	Exit("LoadGameMusic :: out of free game_music handles!");
}

void PlayGameMusic(int song_index)
{
	int i;
    
    if (!gSecurityCamera)
    {
	for (i = 0; i < GAME_MUSIC_MAX_COUNT; i++)
	{
		if (game_music[i].used
			&& i != song_index
			&& game_music[i].playing)
		{
			game_music[i].start_volume = GetSongVolume(game_music[i].song);
			game_music[i].end_volume = 0;
			game_music[i].timestamp = systemtime;
			game_music[i].fade_duration = 800;
		}
	}
	
	if (game_music_active == song_index)
	{
		return;
	}
	game_music_active = song_index;

	game_music[game_music_active].start_volume = GetSongVolume(game_music[game_music_active].song);
	game_music[game_music_active].end_volume = 100;
	game_music[game_music_active].timestamp = systemtime;
	game_music[game_music_active].playing = 1;
	game_music[game_music_active].fade_duration = 800;
	
	Log("Now playing song " + str(game_music_active) + " at handle " + str(game_music[game_music_active].song));
	if (!game_music[game_music_active].paused)
	{
		PlaySong(game_music[game_music_active].song);
	}
	else
	{
		SetSongPaused(game_music[game_music_active].song, 0);
	}
	SetSongVolume(game_music[game_music_active].song, game_music[game_music_active].start_volume);
    }
}

void UpdateGameMusic()
{
	int i;
	int v;
	
	
	for (i = 0; i < GAME_MUSIC_MAX_COUNT; i++)
	{
		if (game_music[i].used && game_music[i].playing)
		{
			if (systemtime - game_music[i].timestamp < game_music[i].fade_duration)
			{
				v = (((systemtime - game_music[i].timestamp)
					* (game_music[i].end_volume - game_music[i].start_volume))
					/ game_music[i].fade_duration) + game_music[i].start_volume;
				//Log(str(i) + " -> " + str(v));
				SetSongVolume(game_music[i].song, v);
			}
			else if (GetSongVolume(game_music[i].song) != game_music[i].end_volume)
			{
				game_music[i].start_volume = game_music[i].end_volume;
				v = game_music[i].end_volume;
				SetSongVolume(game_music[i].song, v);
			}
			
			
			if (v == 0 && i != game_music_active)
			{
				game_music[i].playing = 0;
				game_music[i].paused = 1;
				SetSongPaused(game_music[i].song, 1);
				//StopSong(game_music[i].song);
			}
		}
	}
}

int GetGameMusicVolume()
{
	return GetSongVolume(game_music[game_music_active].song);
}

int FadeGameMusic(int start, int end, int duration)
{
	game_music[game_music_active].start_volume = start;
	game_music[game_music_active].end_volume = end;
	game_music[game_music_active].fade_duration = duration;
	game_music[game_music_active].timestamp = systemtime;
}